
foodloader:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000e426  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  0000e000  0000e000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  0000e42c  000004a0  2**0
                  ALLOC
  3 .stab         00001194  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b35  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

0000e000 <__vectors>:
    e000:	0c 94 3e 70 	jmp	0xe07c	; 0xe07c <__ctors_end>
    e004:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e008:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e00c:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e010:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e014:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e018:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e01c:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e020:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e024:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e028:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e02c:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e030:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e034:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e038:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e03c:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e040:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e044:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e048:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e04c:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e050:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e054:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e058:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e05c:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e060:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e064:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e068:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e06c:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e070:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e074:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>
    e078:	0c 94 5b 70 	jmp	0xe0b6	; 0xe0b6 <__bad_interrupt>

0000e07c <__ctors_end>:
    e07c:	11 24       	eor	r1, r1
    e07e:	1f be       	out	0x3f, r1	; 63
    e080:	cf ef       	ldi	r28, 0xFF	; 255
    e082:	d0 e1       	ldi	r29, 0x10	; 16
    e084:	de bf       	out	0x3e, r29	; 62
    e086:	cd bf       	out	0x3d, r28	; 61

0000e088 <__do_copy_data>:
    e088:	11 e0       	ldi	r17, 0x01	; 1
    e08a:	a0 e0       	ldi	r26, 0x00	; 0
    e08c:	b1 e0       	ldi	r27, 0x01	; 1
    e08e:	e6 e2       	ldi	r30, 0x26	; 38
    e090:	f4 ee       	ldi	r31, 0xE4	; 228
    e092:	02 c0       	rjmp	.+4      	; 0xe098 <.do_copy_data_start>

0000e094 <.do_copy_data_loop>:
    e094:	05 90       	lpm	r0, Z+
    e096:	0d 92       	st	X+, r0

0000e098 <.do_copy_data_start>:
    e098:	a6 30       	cpi	r26, 0x06	; 6
    e09a:	b1 07       	cpc	r27, r17
    e09c:	d9 f7       	brne	.-10     	; 0xe094 <.do_copy_data_loop>

0000e09e <__do_clear_bss>:
    e09e:	11 e0       	ldi	r17, 0x01	; 1
    e0a0:	a6 e0       	ldi	r26, 0x06	; 6
    e0a2:	b1 e0       	ldi	r27, 0x01	; 1
    e0a4:	01 c0       	rjmp	.+2      	; 0xe0a8 <.do_clear_bss_start>

0000e0a6 <.do_clear_bss_loop>:
    e0a6:	1d 92       	st	X+, r1

0000e0a8 <.do_clear_bss_start>:
    e0a8:	ac 30       	cpi	r26, 0x0C	; 12
    e0aa:	b1 07       	cpc	r27, r17
    e0ac:	e1 f7       	brne	.-8      	; 0xe0a6 <.do_clear_bss_loop>
    e0ae:	0e 94 78 70 	call	0xe0f0	; 0xe0f0 <main>
    e0b2:	0c 94 11 72 	jmp	0xe422	; 0xe422 <_exit>

0000e0b6 <__bad_interrupt>:
    e0b6:	0c 94 00 70 	jmp	0xe000	; 0xe000 <__vectors>

0000e0ba <uart_putc>:
#define noinline __attribute__((noinline))


/** output one character */
static noinline void uart_putc(uint8_t data)
/*{{{*/ {
    e0ba:	98 2f       	mov	r25, r24

    /* loop until data has been transmitted */
    while (!(_UCSRA_UART0 & _BV(_UDRE_UART0)));
    e0bc:	80 91 c0 00 	lds	r24, 0x00C0
    e0c0:	85 ff       	sbrs	r24, 5
    e0c2:	fc cf       	rjmp	.-8      	; 0xe0bc <uart_putc+0x2>

    /* put data in buffer */
    _UDR_UART0 = data;
    e0c4:	90 93 c6 00 	sts	0x00C6, r25

} /* }}} */
    e0c8:	08 95       	ret

0000e0ca <uart_getc>:
/** block until one character has been read */
static noinline uint8_t uart_getc(void)
/*{{{*/ {

    /* wait if a byte has been received */
    while (!(_UCSRA_UART0 & _BV(_RXC_UART0)));
    e0ca:	80 91 c0 00 	lds	r24, 0x00C0
    e0ce:	87 ff       	sbrs	r24, 7
    e0d0:	fc cf       	rjmp	.-8      	; 0xe0ca <uart_getc>

    /* return received byte */
    return _UDR_UART0;
    e0d2:	80 91 c6 00 	lds	r24, 0x00C6

} /* }}} */
    e0d6:	08 95       	ret

0000e0d8 <start_application>:
/** move interrupt vectors to application section and jump to main program */
static noinline void start_application(void)
/* {{{ */ {

        /* reset input pin */
        BOOTLOADER_PORT &= BOOTLOADER_MASK;
    e0d8:	88 b1       	in	r24, 0x08	; 8
    e0da:	81 70       	andi	r24, 0x01	; 1
    e0dc:	88 b9       	out	0x08, r24	; 8

        /* move interrupt vectors to application section and jump to main program */
        _IVREG = _BV(IVCE);
    e0de:	81 e0       	ldi	r24, 0x01	; 1
    e0e0:	85 bf       	out	0x35, r24	; 53
        _IVREG = 0;
    e0e2:	15 be       	out	0x35, r1	; 53
        jump_to_application();
    e0e4:	e0 91 06 01 	lds	r30, 0x0106
    e0e8:	f0 91 07 01 	lds	r31, 0x0107
    e0ec:	09 95       	icall

} /* }}} */
    e0ee:	08 95       	ret

0000e0f0 <main>:

int main(void)
/* {{{ */ {
    e0f0:	2f 92       	push	r2
    e0f2:	3f 92       	push	r3
    e0f4:	4f 92       	push	r4
    e0f6:	5f 92       	push	r5
    e0f8:	6f 92       	push	r6
    e0fa:	7f 92       	push	r7
    e0fc:	8f 92       	push	r8
    e0fe:	9f 92       	push	r9
    e100:	af 92       	push	r10
    e102:	bf 92       	push	r11
    e104:	cf 92       	push	r12
    e106:	df 92       	push	r13
    e108:	ef 92       	push	r14
    e10a:	ff 92       	push	r15
    e10c:	0f 93       	push	r16
    e10e:	1f 93       	push	r17
    e110:	cf 93       	push	r28
    e112:	df 93       	push	r29

#   ifdef HONOR_WATCHDOG_RESET
    /* if this reset was caused by the watchdog timer, just start the
     * application, else disable the watchdog */
    if (MCUSR & _BV(WDRF))
    e114:	04 b6       	in	r0, 0x34	; 52
    e116:	03 fe       	sbrs	r0, 3
    e118:	06 c0       	rjmp	.+12     	; 0xe126 <main+0x36>
        jump_to_application();
    e11a:	e0 91 06 01 	lds	r30, 0x0106
    e11e:	f0 91 07 01 	lds	r31, 0x0107
    e122:	09 95       	icall
    e124:	08 c0       	rjmp	.+16     	; 0xe136 <main+0x46>
    else
        wdt_disable();
    e126:	88 e1       	ldi	r24, 0x18	; 24
    e128:	0f b6       	in	r0, 0x3f	; 63
    e12a:	f8 94       	cli
    e12c:	80 93 60 00 	sts	0x0060, r24
    e130:	10 92 60 00 	sts	0x0060, r1
    e134:	0f be       	out	0x3f, r0	; 63
/** init the hardware uart */
static inline void init_uart(void)
/*{{{*/ {

    /* set baud rate */
    _UBRRH_UART0 = (uint8_t)(UART_UBRR >> 8);  /* high byte */
    e136:	10 92 c5 00 	sts	0x00C5, r1
    _UBRRL_UART0 = (uint8_t)UART_UBRR;         /* low byte */
    e13a:	8a e0       	ldi	r24, 0x0A	; 10
    e13c:	80 93 c4 00 	sts	0x00C4, r24

    /* set mode */
    _UCSRC_UART0 = UART_UCSRC;
    e140:	86 e0       	ldi	r24, 0x06	; 6
    e142:	80 93 c2 00 	sts	0x00C2, r24

    /* enable transmitter, receiver */
    _UCSRB_UART0 = _BV(_TXEN_UART0) | _BV(_RXEN_UART0);
    e146:	88 e1       	ldi	r24, 0x18	; 24
    e148:	80 93 c1 00 	sts	0x00C1, r24
#   if SEND_BOOT_MESSAGE
        uart_putc('b');
#   endif

    /* configure pin as input and enable pullup */
    BOOTLOADER_DDR &= ~BOOTLOADER_MASK;
    e14c:	38 98       	cbi	0x07, 0	; 7
    BOOTLOADER_PORT |= BOOTLOADER_MASK;
    e14e:	40 9a       	sbi	0x08, 0	; 8
    } else {
#       if SEND_BOOT_MESSAGE
        uart_putc('a');
#       endif

        start_application();
    e150:	0e 94 6c 70 	call	0xe0d8	; 0xe0d8 <start_application>
    while (1)
    {
        uint8_t command;

        /* block until a command has been received */
        command = uart_getc();
    e154:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>

        switch (command)
    e158:	86 35       	cpi	r24, 0x56	; 86
    e15a:	09 f4       	brne	.+2      	; 0xe15e <main+0x6e>
    e15c:	78 c0       	rjmp	.+240    	; 0xe24e <main+0x15e>
    e15e:	87 35       	cpi	r24, 0x57	; 87
    e160:	c8 f4       	brcc	.+50     	; 0xe194 <main+0xa4>
    e162:	8c 34       	cpi	r24, 0x4C	; 76
    e164:	09 f4       	brne	.+2      	; 0xe168 <main+0x78>
    e166:	0b c1       	rjmp	.+534    	; 0xe37e <main+0x28e>
    e168:	8d 34       	cpi	r24, 0x4D	; 77
    e16a:	50 f4       	brcc	.+20     	; 0xe180 <main+0x90>
    e16c:	82 34       	cpi	r24, 0x42	; 66
    e16e:	09 f4       	brne	.+2      	; 0xe172 <main+0x82>
    e170:	80 c0       	rjmp	.+256    	; 0xe272 <main+0x182>
    e172:	85 34       	cpi	r24, 0x45	; 69
    e174:	09 f4       	brne	.+2      	; 0xe178 <main+0x88>
    e176:	03 c1       	rjmp	.+518    	; 0xe37e <main+0x28e>
    e178:	81 34       	cpi	r24, 0x41	; 65
    e17a:	09 f0       	breq	.+2      	; 0xe17e <main+0x8e>
    e17c:	4e c1       	rjmp	.+668    	; 0xe41a <main+0x32a>
    e17e:	28 c0       	rjmp	.+80     	; 0xe1d0 <main+0xe0>
    e180:	83 35       	cpi	r24, 0x53	; 83
    e182:	09 f4       	brne	.+2      	; 0xe186 <main+0x96>
    e184:	5b c0       	rjmp	.+182    	; 0xe23c <main+0x14c>
    e186:	84 35       	cpi	r24, 0x54	; 84
    e188:	09 f4       	brne	.+2      	; 0xe18c <main+0x9c>
    e18a:	4b c0       	rjmp	.+150    	; 0xe222 <main+0x132>
    e18c:	80 35       	cpi	r24, 0x50	; 80
    e18e:	09 f0       	breq	.+2      	; 0xe192 <main+0xa2>
    e190:	44 c1       	rjmp	.+648    	; 0xe41a <main+0x32a>
    e192:	f5 c0       	rjmp	.+490    	; 0xe37e <main+0x28e>
    e194:	85 36       	cpi	r24, 0x65	; 101
    e196:	69 f1       	breq	.+90     	; 0xe1f2 <main+0x102>
    e198:	86 36       	cpi	r24, 0x66	; 102
    e19a:	48 f4       	brcc	.+18     	; 0xe1ae <main+0xbe>
    e19c:	81 36       	cpi	r24, 0x61	; 97
    e19e:	b1 f0       	breq	.+44     	; 0xe1cc <main+0xdc>
    e1a0:	82 36       	cpi	r24, 0x62	; 98
    e1a2:	09 f4       	brne	.+2      	; 0xe1a6 <main+0xb6>
    e1a4:	5e c0       	rjmp	.+188    	; 0xe262 <main+0x172>
    e1a6:	88 35       	cpi	r24, 0x58	; 88
    e1a8:	09 f0       	breq	.+2      	; 0xe1ac <main+0xbc>
    e1aa:	37 c1       	rjmp	.+622    	; 0xe41a <main+0x32a>
    e1ac:	57 c0       	rjmp	.+174    	; 0xe25c <main+0x16c>
    e1ae:	80 37       	cpi	r24, 0x70	; 112
    e1b0:	09 f4       	brne	.+2      	; 0xe1b4 <main+0xc4>
    e1b2:	52 c0       	rjmp	.+164    	; 0xe258 <main+0x168>
    e1b4:	81 37       	cpi	r24, 0x71	; 113
    e1b6:	20 f4       	brcc	.+8      	; 0xe1c0 <main+0xd0>
    e1b8:	87 36       	cpi	r24, 0x67	; 103
    e1ba:	09 f0       	breq	.+2      	; 0xe1be <main+0xce>
    e1bc:	2e c1       	rjmp	.+604    	; 0xe41a <main+0x32a>
    e1be:	e1 c0       	rjmp	.+450    	; 0xe382 <main+0x292>
    e1c0:	83 37       	cpi	r24, 0x73	; 115
    e1c2:	91 f1       	breq	.+100    	; 0xe228 <main+0x138>
    e1c4:	84 37       	cpi	r24, 0x74	; 116
    e1c6:	09 f0       	breq	.+2      	; 0xe1ca <main+0xda>
    e1c8:	28 c1       	rjmp	.+592    	; 0xe41a <main+0x32a>
    e1ca:	36 c0       	rjmp	.+108    	; 0xe238 <main+0x148>
#endif
                        uart_putc('\r');
                        break;

            case 'a':   /* report if we support address autoincrementing: yes, of course */
                        uart_putc('Y');
    e1cc:	89 e5       	ldi	r24, 0x59	; 89
    e1ce:	26 c1       	rjmp	.+588    	; 0xe41c <main+0x32c>

            case 'A':   /* set write address start (in words), read high and low byte and respond with CR */
                        /* {{{ */

                        /* eeprom address is a byte address */
                        eeprom_address = (uart_getc() << 8) | uart_getc();
    e1d0:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
    e1d4:	18 2f       	mov	r17, r24
    e1d6:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
    e1da:	91 2e       	mov	r9, r17
    e1dc:	88 24       	eor	r8, r8
    e1de:	90 e0       	ldi	r25, 0x00	; 0
    e1e0:	88 29       	or	r24, r8
    e1e2:	99 29       	or	r25, r9
    e1e4:	90 93 09 01 	sts	0x0109, r25
    e1e8:	80 93 08 01 	sts	0x0108, r24

                        /* flash address is a byte address too, but we get a
                         * word address so convert it */
                        flash_address = eeprom_address << 1;
    e1ec:	88 0f       	add	r24, r24
    e1ee:	99 1f       	adc	r25, r25
    e1f0:	13 c0       	rjmp	.+38     	; 0xe218 <main+0x128>

                        /* acknowledge */
                        uart_putc('\r');
                        break;
    e1f2:	80 e0       	ldi	r24, 0x00	; 0
    e1f4:	90 e0       	ldi	r25, 0x00	; 0
    e1f6:	0c c0       	rjmp	.+24     	; 0xe210 <main+0x120>

                        /* iterate over all pages in flash, and try to erase every single
                         * one of them (the bootloader section should be protected by lock-bits (!) */

                        for (flash_address = 0; flash_address < BOOT_SECTION_START; flash_address += SPM_PAGESIZE) {
                            boot_page_erase_safe(flash_address);
    e1f8:	07 b6       	in	r0, 0x37	; 55
    e1fa:	00 fc       	sbrc	r0, 0
    e1fc:	fd cf       	rjmp	.-6      	; 0xe1f8 <main+0x108>
    e1fe:	f9 99       	sbic	0x1f, 1	; 31
    e200:	fe cf       	rjmp	.-4      	; 0xe1fe <main+0x10e>
    e202:	23 e0       	ldi	r18, 0x03	; 3
    e204:	fc 01       	movw	r30, r24
    e206:	20 93 57 00 	sts	0x0057, r18
    e20a:	e8 95       	spm
    e20c:	80 50       	subi	r24, 0x00	; 0
    e20e:	9f 4f       	sbci	r25, 0xFF	; 255
                        /* {{{ */

                        /* iterate over all pages in flash, and try to erase every single
                         * one of them (the bootloader section should be protected by lock-bits (!) */

                        for (flash_address = 0; flash_address < BOOT_SECTION_START; flash_address += SPM_PAGESIZE) {
    e210:	40 ee       	ldi	r20, 0xE0	; 224
    e212:	80 30       	cpi	r24, 0x00	; 0
    e214:	94 07       	cpc	r25, r20
    e216:	80 f3       	brcs	.-32     	; 0xe1f8 <main+0x108>
    e218:	90 93 0b 01 	sts	0x010B, r25
    e21c:	80 93 0a 01 	sts	0x010A, r24
    e220:	ae c0       	rjmp	.+348    	; 0xe37e <main+0x28e>
            case 'T':   /* select device type: received device type and respond with CR */
                        /* ignore this command, only the device this bootloader
                         * is installed on can be programmed :) */

                        /* discard byte and acknowledge */
                        uart_getc();
    e222:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
    e226:	ab c0       	rjmp	.+342    	; 0xe37e <main+0x28e>
                        uart_putc('\r');
                        break;

            case 's':   /* read signature bytes: respond with the three signature bytes for this MCU */
                        uart_putc(_SIG_BYTE_3);
    e228:	89 e0       	ldi	r24, 0x09	; 9
    e22a:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
                        uart_putc(_SIG_BYTE_2);
    e22e:	86 e9       	ldi	r24, 0x96	; 150
    e230:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
                        uart_putc(_SIG_BYTE_1);
    e234:	8e e1       	ldi	r24, 0x1E	; 30
    e236:	f2 c0       	rjmp	.+484    	; 0xe41c <main+0x32c>
                        break;

            case 't':   /* return supported device codes (only one in this case), and terminate with a nullbyte */
                        uart_putc(_AVR910_DEVCODE);
    e238:	84 e7       	ldi	r24, 0x74	; 116
    e23a:	17 c0       	rjmp	.+46     	; 0xe26a <main+0x17a>
                        uart_putc(0);
                        break;

            case 'S':   /* give software identifier, send exactly 7 chars */
                        uart_puts((uint8_t *)"FDL v");
    e23c:	c0 e0       	ldi	r28, 0x00	; 0
    e23e:	d1 e0       	ldi	r29, 0x01	; 1
    e240:	03 c0       	rjmp	.+6      	; 0xe248 <main+0x158>
static inline void uart_puts(uint8_t buffer[])
/*{{{*/ {

    /* send everything until end of string */
    while (*buffer != 0) {
        uart_putc(*buffer);
    e242:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
        buffer++;
    e246:	21 96       	adiw	r28, 0x01	; 1
/** output a string */
static inline void uart_puts(uint8_t buffer[])
/*{{{*/ {

    /* send everything until end of string */
    while (*buffer != 0) {
    e248:	88 81       	ld	r24, Y
    e24a:	88 23       	and	r24, r24
    e24c:	d1 f7       	brne	.-12     	; 0xe242 <main+0x152>

            case 'S':   /* give software identifier, send exactly 7 chars */
                        uart_puts((uint8_t *)"FDL v");

            case 'V':   /* return software version (2 byte) */
                        uart_putc(VERSION_BYTE_1);
    e24e:	80 e3       	ldi	r24, 0x30	; 48
    e250:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
                        uart_putc(VERSION_BYTE_2);
    e254:	82 e3       	ldi	r24, 0x32	; 50
    e256:	e2 c0       	rjmp	.+452    	; 0xe41c <main+0x32c>
                        break;

            case 'p':   /* send programmer type, in this case 'S' for serial */
                        uart_putc('S');
    e258:	83 e5       	ldi	r24, 0x53	; 83
    e25a:	e0 c0       	rjmp	.+448    	; 0xe41c <main+0x32c>
#if EXIT_BOOTLOADER == 1
            case 'E':   /* exit bootloader */
#endif
            case 'X':   /* start application */

                        start_application();
    e25c:	0e 94 6c 70 	call	0xe0d8	; 0xe0d8 <start_application>
    e260:	8e c0       	rjmp	.+284    	; 0xe37e <main+0x28e>
                        uart_putc('\r');

                        break;

            case 'b':   /* check block support: return yes and 2 bytes block size we support */
                        uart_putc('Y');
    e262:	89 e5       	ldi	r24, 0x59	; 89
    e264:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
                        uart_putc(HIGH(BLOCKSIZE));
    e268:	81 e0       	ldi	r24, 0x01	; 1
    e26a:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
                        uart_putc(LOW(BLOCKSIZE));
    e26e:	80 e0       	ldi	r24, 0x00	; 0
    e270:	d5 c0       	rjmp	.+426    	; 0xe41c <main+0x32c>

            case 'B':   /* start block flash or eeprom load (fill mcu internal page buffer) */
                        /* {{{ */

                        /* first, read buffer size (in bytes) */
                        buffer_size = (uart_getc() << 8) | uart_getc();
    e272:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
    e276:	18 2f       	mov	r17, r24
    e278:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
    e27c:	71 2e       	mov	r7, r17
    e27e:	66 24       	eor	r6, r6
    e280:	08 2f       	mov	r16, r24
    e282:	10 e0       	ldi	r17, 0x00	; 0
    e284:	06 29       	or	r16, r6
    e286:	17 29       	or	r17, r7

                        /* check if our buffer can hold all this data */
                        if (buffer_size > BLOCKSIZE) {
    e288:	81 e0       	ldi	r24, 0x01	; 1
    e28a:	01 30       	cpi	r16, 0x01	; 1
    e28c:	18 07       	cpc	r17, r24
    e28e:	08 f0       	brcs	.+2      	; 0xe292 <main+0x1a2>
    e290:	c4 c0       	rjmp	.+392    	; 0xe41a <main+0x32a>
                            uart_putc('?');
                            break;
                        }

                        /* then, read flash ('F') or eeprom ('E') memory type */
                        memory_type = uart_getc();
    e292:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>

                        /* memory type is flash */
                        if (memory_type == 'F')
    e296:	86 34       	cpi	r24, 0x46	; 70
    e298:	09 f0       	breq	.+2      	; 0xe29c <main+0x1ac>
    e29a:	50 c0       	rjmp	.+160    	; 0xe33c <main+0x24c>
                        /* {{{ */ {

                            BUF_T i;
                            uint16_t temp_word_buffer;

                            if (flash_address > BOOT_SECTION_START) {
    e29c:	80 91 0a 01 	lds	r24, 0x010A
    e2a0:	90 91 0b 01 	lds	r25, 0x010B
    e2a4:	81 50       	subi	r24, 0x01	; 1
    e2a6:	90 4e       	sbci	r25, 0xE0	; 224
    e2a8:	18 f0       	brcs	.+6      	; 0xe2b0 <main+0x1c0>
                                uart_putc(0);
    e2aa:	80 e0       	ldi	r24, 0x00	; 0
    e2ac:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
                            }

                            uint16_t temp_address = flash_address;
    e2b0:	a0 90 0a 01 	lds	r10, 0x010A
    e2b4:	b0 90 0b 01 	lds	r11, 0x010B
                            boot_spm_busy_wait();
    e2b8:	07 b6       	in	r0, 0x37	; 55
    e2ba:	00 fc       	sbrc	r0, 0
    e2bc:	fd cf       	rjmp	.-6      	; 0xe2b8 <main+0x1c8>

                            /* read data, wordwise, low byte first */
                            for (i = 0; i < buffer_size/2; i++) {
    e2be:	68 01       	movw	r12, r16
    e2c0:	d6 94       	lsr	r13
    e2c2:	c7 94       	ror	r12
    e2c4:	75 01       	movw	r14, r10
    e2c6:	c0 e0       	ldi	r28, 0x00	; 0
    e2c8:	d0 e0       	ldi	r29, 0x00	; 0
    e2ca:	16 c0       	rjmp	.+44     	; 0xe2f8 <main+0x208>

                                /* get data word */
                                temp_word_buffer = uart_getc() | (uart_getc() << 8);
    e2cc:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
    e2d0:	08 2f       	mov	r16, r24
    e2d2:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>

                                /* write data to temporary buffer */
                                boot_page_fill(temp_address, temp_word_buffer);
    e2d6:	58 2e       	mov	r5, r24
    e2d8:	44 24       	eor	r4, r4
    e2da:	10 e0       	ldi	r17, 0x00	; 0
    e2dc:	04 29       	or	r16, r4
    e2de:	15 29       	or	r17, r5
    e2e0:	41 e0       	ldi	r20, 0x01	; 1
    e2e2:	08 01       	movw	r0, r16
    e2e4:	f7 01       	movw	r30, r14
    e2e6:	40 93 57 00 	sts	0x0057, r20
    e2ea:	e8 95       	spm
    e2ec:	11 24       	eor	r1, r1

                                /* increment by two, since temp_address is a byte
                                 * address, but we are writing words! */
                                temp_address += 2;
    e2ee:	82 e0       	ldi	r24, 0x02	; 2
    e2f0:	90 e0       	ldi	r25, 0x00	; 0
    e2f2:	e8 0e       	add	r14, r24
    e2f4:	f9 1e       	adc	r15, r25

                            uint16_t temp_address = flash_address;
                            boot_spm_busy_wait();

                            /* read data, wordwise, low byte first */
                            for (i = 0; i < buffer_size/2; i++) {
    e2f6:	21 96       	adiw	r28, 0x01	; 1
    e2f8:	cc 15       	cp	r28, r12
    e2fa:	dd 05       	cpc	r29, r13
    e2fc:	38 f3       	brcs	.-50     	; 0xe2cc <main+0x1dc>
    e2fe:	96 01       	movw	r18, r12
    e300:	22 0f       	add	r18, r18
    e302:	33 1f       	adc	r19, r19
    e304:	2a 0d       	add	r18, r10
    e306:	3b 1d       	adc	r19, r11
                                 * address, but we are writing words! */
                                temp_address += 2;
                            }

                            /* after filling the temp buffer, write the page and wait till we're done */
                            boot_page_write_safe(flash_address);
    e308:	07 b6       	in	r0, 0x37	; 55
    e30a:	00 fc       	sbrc	r0, 0
    e30c:	fd cf       	rjmp	.-6      	; 0xe308 <main+0x218>
    e30e:	f9 99       	sbic	0x1f, 1	; 31
    e310:	fe cf       	rjmp	.-4      	; 0xe30e <main+0x21e>
    e312:	80 91 0a 01 	lds	r24, 0x010A
    e316:	90 91 0b 01 	lds	r25, 0x010B
    e31a:	45 e0       	ldi	r20, 0x05	; 5
    e31c:	fc 01       	movw	r30, r24
    e31e:	40 93 57 00 	sts	0x0057, r20
    e322:	e8 95       	spm
                            boot_spm_busy_wait();
    e324:	07 b6       	in	r0, 0x37	; 55
    e326:	00 fc       	sbrc	r0, 0
    e328:	fd cf       	rjmp	.-6      	; 0xe324 <main+0x234>

                            /* re-enable application flash section, so we can read it again */
                            boot_rww_enable();
    e32a:	81 e1       	ldi	r24, 0x11	; 17
    e32c:	80 93 57 00 	sts	0x0057, r24
    e330:	e8 95       	spm

                            /* store next page's address, since we do auto-address-incrementing */
                            flash_address = temp_address;
    e332:	30 93 0b 01 	sts	0x010B, r19
    e336:	20 93 0a 01 	sts	0x010A, r18
    e33a:	21 c0       	rjmp	.+66     	; 0xe37e <main+0x28e>

                            uart_putc('\r');

                        } /* }}} */
                        else if (memory_type == 'E')
    e33c:	85 34       	cpi	r24, 0x45	; 69
    e33e:	09 f0       	breq	.+2      	; 0xe342 <main+0x252>
    e340:	6c c0       	rjmp	.+216    	; 0xe41a <main+0x32a>
    e342:	c0 e0       	ldi	r28, 0x00	; 0
    e344:	d0 e0       	ldi	r29, 0x00	; 0
    e346:	18 c0       	rjmp	.+48     	; 0xe378 <main+0x288>
                            //uart_putc('E');
                            uint8_t temp_data;
                            BUF_T i;

                            for (i = 0; i < buffer_size; i++) {
                                temp_data = uart_getc();
    e348:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
                                eeprom_write_byte( (uint8_t *)eeprom_address, temp_data);
    e34c:	20 91 08 01 	lds	r18, 0x0108
    e350:	30 91 09 01 	lds	r19, 0x0109
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    e354:	f9 99       	sbic	0x1f, 1	; 31
    e356:	fe cf       	rjmp	.-4      	; 0xe354 <main+0x264>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    e358:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    e35a:	32 bd       	out	0x22, r19	; 34
    e35c:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    e35e:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    e360:	0f b6       	in	r0, 0x3f	; 63
    e362:	f8 94       	cli
    e364:	fa 9a       	sbi	0x1f, 2	; 31
    e366:	f9 9a       	sbi	0x1f, 1	; 31
    e368:	0f be       	out	0x3f, r0	; 63

                                eeprom_address++;
    e36a:	2f 5f       	subi	r18, 0xFF	; 255
    e36c:	3f 4f       	sbci	r19, 0xFF	; 255
    e36e:	30 93 09 01 	sts	0x0109, r19
    e372:	20 93 08 01 	sts	0x0108, r18

                            //uart_putc('E');
                            uint8_t temp_data;
                            BUF_T i;

                            for (i = 0; i < buffer_size; i++) {
    e376:	21 96       	adiw	r28, 0x01	; 1
    e378:	c0 17       	cp	r28, r16
    e37a:	d1 07       	cpc	r29, r17
    e37c:	28 f3       	brcs	.-54     	; 0xe348 <main+0x258>
                                eeprom_write_byte( (uint8_t *)eeprom_address, temp_data);

                                eeprom_address++;
                            }

                            uart_putc('\r');
    e37e:	8d e0       	ldi	r24, 0x0D	; 13
    e380:	4d c0       	rjmp	.+154    	; 0xe41c <main+0x32c>

            case 'g':   /* start block flash or eeprom read */
                        /* {{{ */

                        /* first, read byte counter */
                        buffer_size = (uart_getc() << 8) | uart_getc();
    e382:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
    e386:	18 2f       	mov	r17, r24
    e388:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>
    e38c:	31 2e       	mov	r3, r17
    e38e:	22 24       	eor	r2, r2
    e390:	e8 2e       	mov	r14, r24
    e392:	ff 24       	eor	r15, r15
    e394:	e2 28       	or	r14, r2
    e396:	f3 28       	or	r15, r3

                        /* then, read memory type */
                        memory_type = uart_getc();
    e398:	0e 94 65 70 	call	0xe0ca	; 0xe0ca <uart_getc>

                        /* memory type is flash */
                        if (memory_type == 'F')
    e39c:	86 34       	cpi	r24, 0x46	; 70
    e39e:	e9 f4       	brne	.+58     	; 0xe3da <main+0x2ea>
    e3a0:	c0 e0       	ldi	r28, 0x00	; 0
    e3a2:	d0 e0       	ldi	r29, 0x00	; 0
    e3a4:	16 c0       	rjmp	.+44     	; 0xe3d2 <main+0x2e2>
                            /* read buffer_size words */
                            for (BUF_T i = 0; i < buffer_size; i += 2) {
                                uint16_t temp_word_buffer;

                                /* read word */
                                temp_word_buffer = pgm_read_word(flash_address);
    e3a6:	e0 91 0a 01 	lds	r30, 0x010A
    e3aa:	f0 91 0b 01 	lds	r31, 0x010B
    e3ae:	05 91       	lpm	r16, Z+
    e3b0:	14 91       	lpm	r17, Z+

                                /* send data */
                                uart_putc(LOW(temp_word_buffer));
    e3b2:	80 2f       	mov	r24, r16
    e3b4:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
                                uart_putc(HIGH(temp_word_buffer));
    e3b8:	81 2f       	mov	r24, r17
    e3ba:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>

                                /* increment address by 2, since it's a byte address */
                                flash_address += 2;
    e3be:	80 91 0a 01 	lds	r24, 0x010A
    e3c2:	90 91 0b 01 	lds	r25, 0x010B
    e3c6:	02 96       	adiw	r24, 0x02	; 2
    e3c8:	90 93 0b 01 	sts	0x010B, r25
    e3cc:	80 93 0a 01 	sts	0x010A, r24
                        /* memory type is flash */
                        if (memory_type == 'F')
                        /* {{{ */ {

                            /* read buffer_size words */
                            for (BUF_T i = 0; i < buffer_size; i += 2) {
    e3d0:	22 96       	adiw	r28, 0x02	; 2
    e3d2:	ce 15       	cp	r28, r14
    e3d4:	df 05       	cpc	r29, r15
    e3d6:	38 f3       	brcs	.-50     	; 0xe3a6 <main+0x2b6>
    e3d8:	bd ce       	rjmp	.-646    	; 0xe154 <main+0x64>
                                flash_address += 2;
                            }

                        } /* }}} */
                        /* if memory type is eeprom */
                        else if (memory_type == 'E')
    e3da:	85 34       	cpi	r24, 0x45	; 69
    e3dc:	f1 f4       	brne	.+60     	; 0xe41a <main+0x32a>
    e3de:	10 e0       	ldi	r17, 0x00	; 0
    e3e0:	16 c0       	rjmp	.+44     	; 0xe40e <main+0x31e>

                            for (uint8_t i = 0; i < buffer_size; i += 1) {
                                uint8_t temp_buffer;

                                /* read and send byte */
                                temp_buffer = eeprom_read_byte((uint8_t *)eeprom_address);
    e3e2:	80 91 08 01 	lds	r24, 0x0108
    e3e6:	90 91 09 01 	lds	r25, 0x0109
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    e3ea:	f9 99       	sbic	0x1f, 1	; 31
    e3ec:	fe cf       	rjmp	.-4      	; 0xe3ea <main+0x2fa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    e3ee:	92 bd       	out	0x22, r25	; 34
    e3f0:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    e3f2:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    e3f4:	80 b5       	in	r24, 0x20	; 32
                                uart_putc(temp_buffer);
    e3f6:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>

                                eeprom_address++;
    e3fa:	80 91 08 01 	lds	r24, 0x0108
    e3fe:	90 91 09 01 	lds	r25, 0x0109
    e402:	01 96       	adiw	r24, 0x01	; 1
    e404:	90 93 09 01 	sts	0x0109, r25
    e408:	80 93 08 01 	sts	0x0108, r24
                        } /* }}} */
                        /* if memory type is eeprom */
                        else if (memory_type == 'E')
                        /* {{{ */ {

                            for (uint8_t i = 0; i < buffer_size; i += 1) {
    e40c:	1f 5f       	subi	r17, 0xFF	; 255
    e40e:	81 2f       	mov	r24, r17
    e410:	90 e0       	ldi	r25, 0x00	; 0
    e412:	8e 15       	cp	r24, r14
    e414:	9f 05       	cpc	r25, r15
    e416:	28 f3       	brcs	.-54     	; 0xe3e2 <main+0x2f2>
    e418:	9d ce       	rjmp	.-710    	; 0xe154 <main+0x64>
            /* 'F': read fuse bits -- NOT IMPLEMENTED */
            /* 'N': read high fuse bits -- NOT IMPLEMENTED */
            /* 'Q': read extended fuse bits -- NOT IMPLEMENTED */ /* }}} */

            default:    /* default: respond with '?' */
                        uart_putc('?');
    e41a:	8f e3       	ldi	r24, 0x3F	; 63
    e41c:	0e 94 5d 70 	call	0xe0ba	; 0xe0ba <uart_putc>
    e420:	99 ce       	rjmp	.-718    	; 0xe154 <main+0x64>

0000e422 <_exit>:
    e422:	f8 94       	cli

0000e424 <__stop_program>:
    e424:	ff cf       	rjmp	.-2      	; 0xe424 <__stop_program>
